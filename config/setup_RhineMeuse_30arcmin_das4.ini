[globalOptions]

# Set the input directory map in an absolute path. 
# - The input forcing and parameter directories will be relative to this.
inputDir = /home/niels/PCR-GLOBWB_input_example/RhineMeuse30min/

# Map of clone (must be provided in PCRaster maps)
# - Spatial resolution and coverage are based on this map:
cloneMap = cloneMaps/RhineMeuse30min.map

# The area/landmask of interest:
landmask = cloneMaps/RhineMeuse_landmask.map
# If None, area/landmask is limited for cells with ldd value. 

# Set the output directory in an absolute path.
#~ outputDir = OUTPUTDIRECTORY
outputDir = /var/scratch/niels/output/test_RhineMeuse_30min_input_example

# netcdf attributes for output files:
institution = Department of Physical Geography, Utrecht University
title       = PCR-GLOBWB output
description = test version (by Edwin H. Sutanudjaja) 

startTime = 2002-01-01
endTime   = 2010-12-31
# Format: YYYY-MM-DD
# The model runs on the daily time step.

# spinning up options: 
maxSpinUpsInYears = 10
minConvForTotlSto = 0.5
minConvForSoilSto = 0.5
minConvForGwatSto = 0.5
minConvForChanSto = 0.5

[meteoOptions]

# Set the forcing temperature and precipitation files (relative to inputDir)
temperatureNC   = forcing/temperature_2001to2010.nc
precipitationNC = forcing/precipitation_2001to2010.nc

# Method to calculate referencePotETP (reference potential evaporation+transpiration)
referenceETPotMethod = Hamon
# options are "Hamon" and "Input" ; If "Input", the netcdf input file must be given:
refETPotFileNC = None

[meteoDownscalingOptions]

downscalePrecipitation  = None
downscaleTemperature    = None
downscaleReferenceETPot = None

# downscaling (based on the digital elevation model):
# The downscaling will be performed by providing the "cellIds" (meteoDownscaleIds) of lower resolution cells. 
meteoDownscaleIds = None
highResolutionDEM = None

# lapse rates:
temperLapseRateNC = None
precipLapseRateNC = None

# downscaling criteria
temperatCorrelNC  = None
precipitCorrelNC  = None 

# windows length (unit: arc-degree) for smoothing/averaging forcing data (not recommended):
smoothingWindowsLength = 0

[landSurfaceOptions]
debugWaterBalance = True

numberOfUpperSoilLayers = 3

topographyNC     = landSurface/topoPropertiesRhineMeuse30min.nc
soilPropertiesNC = landSurface/soilPropertiesRhineMeuse30min.nc

includeIrrigation = True
# if True, there are four land cover types defined: forest,grassland,irrPaddy,irrNonPaddy
# if False, two (natural) land cover types defined: forest,grassland

# netcdf time series for historical expansion of irrigation areas (unit: hectares). 
# Note: The resolution of this map must be consisten with the resolution of cellArea. 
historicalIrrigationArea = None

includeDomesticWaterDemand = False
includeIndustryWaterDemand = False

domesticWaterDemandFile = None
industryWaterDemandFile = None

limitAbstraction = False

# zone IDs (scale) at which water demand allocation is performed  
allocationSegmentsForGroundSurfaceWater = None

[forestOptions]
name = forest
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC = landCover/forest/forestPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = landCover/forest/cropKC_forest_daily366.nc
interceptCapNC    = landCover/forest/interceptCap_forest_daily366.nc
coverFractionNC   = landCover/forest/coverFraction_forest_daily366.nc

# initial conditions:
interceptStorIni  = 0.0
snowCoverSWEIni   = 0.0
snowFreeWaterIni  = 0.0
topWaterLayerIni  = 0.0
storUpp000005Ini  = 0.0
storUpp005030Ini  = 0.0
storLow030150Ini  = 0.0
interflowIni      = 0.0

[grasslandOptions]
name = grassland
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05

# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002

landCoverMapsNC = landCover/grassland/grasslandPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.

cropCoefficientNC = landCover/grassland/cropKC_grassland_daily366.nc
interceptCapNC    = landCover/grassland/interceptCap_grassland_daily366.nc
coverFractionNC   = landCover/grassland/coverFraction_grassland_daily366.nc

# initial conditions:
interceptStorIni  = 0.0
snowCoverSWEIni   = 0.0
snowFreeWaterIni  = 0.0
topWaterLayerIni  = 0.0
storUpp000005Ini  = 0.0
storUpp005030Ini  = 0.0
storLow030150Ini  = 0.0
interflowIni      = 0.0

[irrPaddyOptions]
name = irrPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05
#
landCoverMapsNC = landCover/irrPaddy/irrPaddyPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.
#
# other paramater values
minTopWaterLayer = 0.05
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.2

cropCoefficientNC = landCover/irrPaddy/cropKC_irrPaddy_daily366.nc

# initial conditions:
interceptStorIni  = 0.0
snowCoverSWEIni   = 0.0
snowFreeWaterIni  = 0.0
topWaterLayerIni  = 0.0
storUpp000005Ini  = 0.0
storUpp005030Ini  = 0.0
storLow030150Ini  = 0.0
interflowIni      = 0.0

[irrNonPaddyOptions]
name = irrNonPaddy
debugWaterBalance = True

# snow module properties
snowModuleType      =  Simple
freezingT           = -0.0
degreeDayFactor     =  0.0025
snowWaterHoldingCap =  0.1
refreezingCoeff     =  0.05
#
landCoverMapsNC  = landCover/irrNonPaddy/irrNonPaddyPropertiesRhineMeuse.nc
#
# Parameters for the Arno's scheme:
arnoBeta = None
# If arnoBeta is defined, the soil water capacity distribution is based on this.
# If arnoBeta is NOT defined, maxSoilDepthFrac must be defined such that arnoBeta will be calculated based on maxSoilDepthFrac and minSoilDepthFrac.
#
# other paramater values
minTopWaterLayer = 0.0
minCropKC        = 0.2
minInterceptCap  = 0.0002
cropDeplFactor   = 0.5

cropCoefficientNC = landCover/irrNonPaddy/cropKC_irrNonPaddy_daily366.nc

# initial conditions:
interceptStorIni  = 0.0
snowCoverSWEIni   = 0.0
snowFreeWaterIni  = 0.0
topWaterLayerIni  = 0.0
storUpp000005Ini  = 0.0
storUpp005030Ini  = 0.0
storLow030150Ini  = 0.0
interflowIni      = 0.0


[groundwaterOptions]
debugWaterBalance = True

groundwaterPropertiesNC = groundwater/groundwaterProperties.nc

# minimum value for groundwater recession coefficient (day-1)
minRecessionCoeff = 2.5e-4

storGroundwaterIni = initialConditions/storGroundwaterIni_2001-12-31.map
storGroundwaterFossilIni = 0.0
avgTotalGroundwaterAbstractionIni = 0.0

[routingOptions]
debugWaterBalance = True

lddMap      = routing/RhineMeuse_lddsound_30min.map
cellAreaMap = routing/RhineMeuse_cellarea30min.map
gradient    = routing/RhineMeuse_ChannelGradient-RVB_30min.map

# manning coefficient
manningsN   = 0.04

# constant channel width (optional)
constantChannelWidth = None

# minimum channel width (optional)
minimumChannelWidth  = None

routingMethod = kinematicWave
# Options are kinematicWave, simplifiedKinematicWave and accuTravelTime

# option for maximum length of a sub time step in seconds (optional and only used if kinematicWave is used)
# - Note that too long sub time step may create water balance errors.
# - Default values: 3600 seconds for 30 arcmin ; 720 seconds for 5 arcmin
#~ maxiumLengthOfSubTimeStep = 3600.
#~ maxiumLengthOfSubTimeStep = 720.

# lake and reservoir parameters
waterBodyInputNC = routing/waterBodiesRhineMeuse2001To2010.nc
onlyNaturalWaterBodies = False

# composite crop factors for WaterBodies: 
cropCoefficientWaterNC = routing/cropCoefficientForOpenWaterRhineMeuse.nc
minCropWaterKC         = 0.20

# number of days (timesteps) that have been performed for spinning up initial conditions in the routing module (i.e. channelStorageIni, avgDischargeLongIni, avgDischargeShortIni, etc.)
timestepsToAvgDischargeIni     = 0.0
# Note that: 
# - maximum number of days (timesteps) to calculate long term average flow values (default: 5 years = 5 * 365 days = 1825)
# - maximum number of days (timesteps) to calculate short term average values (default: 1 month = 1 * 30 days = 30)

# initial conditions:
waterBodyStorageIni            = 0.0
channelStorageIni              = 0.0
readAvlChannelStorageIni       = 0.0
avgDischargeLongIni            = 0.0
m2tDischargeLongIni            = 0.0
avgBaseflowLongIni             = 0.0
riverbedExchangeIni            = 0.0
avgLakeReservoirInflowShortIni = 0.0
avgLakeReservoirOutflowLongIni = 0.0
#
# initial condition of sub-time step discharge (needed for estimating number of time steps in kinematic wave methods)
subDischargeIni                = None
#
# other initial conditions (optional):
avgDischargeShortIni           = 0.0

[reportingOptions]
# output files that will be written in the disk in netcdf files:
outDailyTotNC = discharge,satDegUpp,storUppTotal
outMonthTotNC = precipitation,totalRunoff,totalEvaporation,interceptEvap,actBareSoilEvap,actTranspiTotal,topWaterLayerEvap,waterBodyActEvaporation,actSnowFreeWaterEvap,infiltration,gwRecharge,interflowTotal,directRunoff,baseflow,local_water_body_flux,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonFossilGroundWaterAbstraction,otherWaterSourceAbstraction,surfaceWaterAbstraction
outMonthAvgNC = totalWaterStorageThickness,discharge,satDegUpp,storUppTotal,totalRunoff,totalEvaporation,interceptEvap,actBareSoilEvap,actTranspiTotal,topWaterLayerEvap,waterBodyActEvaporation,actSnowFreeWaterEvap,infiltration,gwRecharge,interflowTotal,directRunoff,baseflow,local_water_body_flux,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonFossilGroundWaterAbstraction,otherWaterSourceAbstraction,surfaceWaterAbstraction
outMonthEndNC = totalWaterStorageThickness,satDegUpp,satDegLow,storUppTotal,storLowTotal,storGroundwater
outAnnuaTotNC = precipitation,totalRunoff,totalEvaporation,interceptEvap,actBareSoilEvap,actTranspiTotal,topWaterLayerEvap,waterBodyActEvaporation,actSnowFreeWaterEvap,infiltration,gwRecharge,interflowTotal,directRunoff,baseflow,local_water_body_flux,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonFossilGroundWaterAbstraction,otherWaterSourceAbstraction,surfaceWaterAbstraction
outAnnuaAvgNC = totalWaterStorageThickness,discharge,totalRunoff,totalEvaporation,interceptEvap,actBareSoilEvap,actTranspiTotal,topWaterLayerEvap,waterBodyActEvaporation,actSnowFreeWaterEvap,infiltration,gwRecharge,interflowTotal,directRunoff,baseflow,local_water_body_flux,irrGrossDemand,nonIrrGrossDemand,totalGrossDemand,nonFossilGroundWaterAbstraction,otherWaterSourceAbstraction,surfaceWaterAbstraction
outAnnuaEndNC = totalWaterStorageThickness
